"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiSignatureImplement = void 0;
var crypto_js_1 = __importDefault(require("crypto-js"));
var SEPERATOR = '\n';
var AFTERSHIP_HEADER_PREFIX = 'as-';
var ApiSignatureImplement = /** @class */ (function () {
    function ApiSignatureImplement(apiSecret) {
        this.apiSecret = apiSecret;
    }
    ApiSignatureImplement.prototype.sign = function (url, date, method, body, contentType, headers) {
        var canonicalizedHeader = this.canonicalizedHeaders(headers);
        var resource = this.canonicalizedResource(url);
        var s = this.signString(method, body, contentType, date, canonicalizedHeader, resource);
        return crypto_js_1.default.enc.Base64.stringify(crypto_js_1.default.HmacSHA256(s, this.apiSecret));
    };
    ApiSignatureImplement.prototype.canonicalizedHeaders = function (headers) {
        if (headers.length === 0) {
            return '';
        }
        var keys = [];
        var newHeaders = {};
        Object.keys(headers).forEach(function (key) {
            var newKey = key.toLowerCase();
            if (newKey.indexOf(AFTERSHIP_HEADER_PREFIX) === -1) {
                return;
            }
            keys.push(newKey);
            newHeaders[newKey] = headers[key].trim();
        });
        keys.sort();
        var result = [];
        for (var i = 0; i < keys.length; i += 1) {
            result.push("".concat(keys[i], ":").concat(newHeaders[keys[i]]));
        }
        return result.join(SEPERATOR);
    };
    ApiSignatureImplement.prototype.canonicalizedResource = function (url) {
        var u = new URL(url);
        var params = u.search.split('?');
        if (params.length < 2) {
            return u.pathname;
        }
        var sortedParams = new URLSearchParams(params[1]);
        sortedParams.sort();
        return "".concat(u.pathname, "?").concat(sortedParams.toString());
    };
    ApiSignatureImplement.prototype.signString = function (method, body, contentType, date, canonicalizedHeader, resource) {
        var result = method + SEPERATOR;
        var newBody = '';
        var newContentType = contentType;
        if (body === undefined || body.length === 0) {
            newContentType = '';
        }
        else {
            newBody = crypto_js_1.default.MD5(body).toString().toUpperCase();
        }
        result += newBody + SEPERATOR;
        result += newContentType + SEPERATOR;
        result += date + SEPERATOR;
        result += canonicalizedHeader + SEPERATOR;
        result += resource;
        return result;
    };
    return ApiSignatureImplement;
}());
exports.ApiSignatureImplement = ApiSignatureImplement;
//# sourceMappingURL=signature.js.map