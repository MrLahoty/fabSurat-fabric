"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.combineUrlQuery = exports.getQueryString = exports.isStringValid = exports.buildTrackingUrl = void 0;
var error_1 = require("../error/error");
var error_enum_1 = require("../error/error_enum");
/**
 * Build tracking url by param
 * @param param tracking param
 * @param sub_path the sub path behind /:id, f.e. /:id/retrack
 */
function buildTrackingUrl(param, sub_path) {
    if (param === undefined) {
        throw error_1.AftershipError.getSdkError(error_enum_1.ErrorEnum.handlerInvalidEmptyTrackingIdAndNumber, param);
    }
    if (isStringValid(param.id) &&
        (isStringValid(param.slug) || isStringValid(param.tracking_number))) {
        throw error_1.AftershipError.getSdkError(error_enum_1.ErrorEnum.handlerInvalidBothTrackingIdAndNumber, param.id);
    }
    else if (!isStringValid(param.id) &&
        !isStringValid(param.slug) &&
        !isStringValid(param.tracking_number)) {
        throw error_1.AftershipError.getSdkError(error_enum_1.ErrorEnum.handlerInvalidEmptyTrackingIdAndNumber, param.tracking_number);
    }
    else if (!isStringValid(param.id) &&
        (!isStringValid(param.slug) || !isStringValid(param.tracking_number))) {
        throw error_1.AftershipError.getSdkError(error_enum_1.ErrorEnum.handlerInvalidEmptySlugOrTrackNumber, param.tracking_number);
    }
    // Build url
    var url = '';
    // id
    if (isStringValid(param.id)) {
        url = "".concat(param.id);
    }
    else {
        // slug && tracking_number
        url = "".concat(param.slug, "/").concat(param.tracking_number);
    }
    // Add sub path
    if (isStringValid(sub_path)) {
        url += "/".concat(sub_path);
    }
    // Add the additional parameters to query string
    if (param.optional_parameters !== undefined) {
        var query_string = getQueryString(param.optional_parameters);
        if (isStringValid(query_string)) {
            url = "".concat(url, "?").concat(query_string);
        }
    }
    return url;
}
exports.buildTrackingUrl = buildTrackingUrl;
/**
 * Check if the string value is valid
 * @param val string value
 */
function isStringValid(val) {
    return (val !== undefined && val !== null && typeof val === 'string' && val !== '');
}
exports.isStringValid = isStringValid;
/**
 * Object to query string
 * @param data Object
 */
function getQueryString(data) {
    if (data === undefined)
        return '';
    return Object.keys(data)
        .map(function (key) {
        var val = encodeURIComponent(data[key]);
        return "".concat(key, "=").concat(val);
    })
        .join('&');
}
exports.getQueryString = getQueryString;
/**
 * Combine the url and query string
 * @param url url
 * @param query query string
 */
function combineUrlQuery(url, query) {
    // When url or query is invalid, don't need to combine the query string
    if (!isStringValid(url) || !isStringValid(query)) {
        return url;
    }
    return "".concat(url).concat(url.indexOf('?') === 0 ? '?' : '&').concat(query);
}
exports.combineUrlQuery = combineUrlQuery;
//# sourceMappingURL=util.js.map